# this sets the user nginx will run as,
#and the number of worker processes
user nobody nogroup;
worker_processes  1;

# setup where nginx will log errors to
# and where the nginx process id resides
error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;

events {
  worker_connections  1024;
  # set to on if you have more than 1 worker_processes
  accept_mutex off;
}

http {
  include       /etc/nginx/mime.types;

  default_type application/octet-stream;
  access_log /tmp/nginx.access.log combined;

  # use the kernel sendfile
  sendfile        on;
  # prepend http headers before sendfile()
  tcp_nopush     on;

  keepalive_timeout  5;
  tcp_nodelay        on;

  gzip  on;
  gzip_vary on;
  gzip_min_length 500;

  gzip_disable "MSIE [1-6]\.(?!.*SV1)";
  gzip_types text/plain text/xml text/css
     text/comma-separated-values
     text/javascript application/x-javascript
     application/atom+xml image/x-icon;

  # use the socket we configured in our unicorn.rb
  upstream personal_site_server {
    server unix:/var/www/personal_site/tmp/sockets/unicorn.personal_site.sock fail_timeout=0;
  }
  upstream upup_server {
    # Path to Unicorn SOCK file, as defined previously
    server unix:/var/www/upup/upup_phase1/tmp/sockets/unicorn.upup.sock fail_timeout=0;
  }

  # configure the virtual host
  server {
    # replace with your domain name
    server_name seanpcalahan.net www.seanpcallahan.net;
    # replace this with your static Sinatra app files, root + public
    root /var/www/personal_site/public;
    # port to listen for requests on
    listen 80;
    listen [::]:80 ipv6only=on;
    # maximum accepted body size of client request
    client_max_body_size 4G;
    # the server will close connections after this time
    keepalive_timeout 5;

    location / {
      try_files $uri @app;
    }

    location @app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      # pass to the upstream unicorn server mentioned above
      proxy_pass http://personal_site_server;
    }
  }

  server {
    listen 80;
    listen [::]:80;
    server_name cleancarupup.com www.cleancarupup.com http://cleancarupup.com http://www.cleancarupup.com;
    return 301 https://$host$request_uri;
  }


  server {
    #listen 80;
    #listen [::]:80;
    listen 443;

    ssl on;
    ssl_certificate /etc/nginx/ssl/cleancarupup_com/ssl-bundle.crt;
    ssl_certificate_key /etc/nginx/ssl/cleancarupup_com/cleancarupup_com.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    server_name https://cleancarupup.com https://www.cleancarupup.com;

    if ($host = "ogolawyers.com") {
      rewrite ^ http://ogolawyers.com redirect;
    }

    # Application root, as defined previously
    root /var/www/upup/upup_phase1/public;

    try_files $uri/index.html $uri @app;

    location @app {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_pass http://upup_server;
    }

    error_page 500 502 503 504 /500.html;
    client_max_body_size 4G;
    keepalive_timeout 10;
  }
}
